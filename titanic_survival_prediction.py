# -*- coding: utf-8 -*-
"""Titanic Survival Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1teLjzE4Xb38WROFd3-JqBhm7jjRi8kFN

importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Colloection & Preprocessing"""

#load the data from csv to panda dataframe
titanic_data = pd.read_csv('/content/Titanic-Dataset.csv')

#printing the first 5 rows of the data frame
titanic_data.head()

# number of rows and columns
titanic_data.shape

# getting some information about the data
titanic_data.info()

#missing values checking
titanic_data.isnull().sum()

"""Handling the missing values"""

# drop cabin cloumn from the dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis = 1)

# replacing the missing values in 'Age' column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

# replacing missing values 'Embarked' with mode
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

titanic_data.isnull().sum()

"""Data Analysis"""

# statictical measures about the dataset
titanic_data.describe()

# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data Visualization"""

sns.set()

# count plot for survived column
sns.countplot(x='Survived', data=titanic_data)

titanic_data['Sex'].value_counts()

sns.countplot(x='Sex', data = titanic_data)

# compare survivors to gender
sns.countplot(x='Sex', hue = 'Survived', data=titanic_data)

#making countplot for p class
sns.countplot(x='Pclass', data=titanic_data)

sns.countplot(x='Pclass', hue = 'Survived', data=titanic_data)

sns.countplot(x='Embarked', hue = 'Survived', data=titanic_data)

"""Encoding the categores as numericals"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting categorical column
titanic_data.replace({'Sex' : {'male':0, 'female': 1}, 'Embarked' :{'S':0, 'C':1, 'Q': 2}}, inplace=True)

titanic_data.head()

"""Seperating features & Targets"""

X = titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'], axis=1)
Y =titanic_data['Survived']

print(X)

print(Y)

"""Splitting the data into Train and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training


Logistic Regression (Binary Classification)
"""

model = LogisticRegression()

# training the LR model with training data
model.fit(X_train , Y_train)

"""Evaluating the model

Accuracy Score
"""

# accuracy of training data
X_train_prediction= model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy Score of Training data : ', training_data_accuracy  )

# accuracy of test data
X_test_prediction= model.predict(X_test)

print(X_test_prediction)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy Score of Test data : ', test_data_accuracy  )

